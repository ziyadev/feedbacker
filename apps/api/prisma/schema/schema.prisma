datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "driverAdapters", "prismaSchemaFolder"]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String
  emailVerified Boolean   @default(false)
  avatar        String?
  lockedAt      DateTime?

  hashedPassword String?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt @default(now())
  subscribed       Boolean  @default(true) // email subscription
  source           String? // where the user came from
  defaultWorkspace String? // slug of the user's default workspace
  referralLinkId   String? // this user's referral link ID

  // relational data
  accounts         Account[]
  sessions         Session[]
  workspaces       Workspace[]
  workspaceMembers WorkspaceMember[]

  @@index(source)
  @@index(defaultWorkspace)
}

enum AccountType {
  OAUTH
}

model Account {
  id                String      @id @default(cuid())
  userId            String
  type              AccountType @default(OAUTH)
  provider          String
  providerAccountId String      @unique
  expires_at        Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}